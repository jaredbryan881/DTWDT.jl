var documenterSearchIndex = {"docs":
[{"location":"#DTWDT.jl-1","page":"Home","title":"DTWDT.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Dynamic Time Warping for evaluating Time shift and Distance between two signals.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This package is developed in reference to  Dylan Mikesell's DynamicWarping repo in MATLAB and tclements/DynamicWarping-python.","category":"page"},{"location":"#Instalation-1","page":"Home","title":"Instalation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"pkg> add https://github.com/kura-okubo/DTWDT.jl","category":"page"},{"location":"#Functions-1","page":"Home","title":"Functions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Examples-1","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can try examples by running scripts in EXAMPLE.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"e.g. >julia DTWDT_run_example.jl","category":"page"},{"location":"#Versions-1","page":"Home","title":"Versions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"v1.0.0: Full translation of Dylan Mikesell's DynamicWarping repo.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Copyright Â© Kurama OKubo, 2019","category":"page"},{"location":"Functions/#DTWDT-Functions-1","page":"Functions","title":"DTWDT Functions","text":"","category":"section"},{"location":"Functions/#","page":"Functions","title":"Functions","text":"These are fundamental functions to calculate DTW distance distance array and DTW error between two time series.","category":"page"},{"location":"Functions/#","page":"Functions","title":"Functions","text":"computeErrorFunction\naccumulateErrorFunction\nbacktrackDistanceFunction\ncomputeDTWerror","category":"page"},{"location":"Functions/#DTWDT.DTWDTfunctions.computeErrorFunction","page":"Functions","title":"DTWDT.DTWDTfunctions.computeErrorFunction","text":"USAGE: err = computeErrorFunction( u1, u0, nSample, lag )\n\nINPUT:\n\nu1      = trace that we want to warp; size = (nsamp,1)\n\nu0      = reference trace to compare with: size = (nsamp,1)\n\nnSample = numer of points to compare in the traces\n\nlag     = maximum lag in sample number to search\n\nnorm    = 'L2' or 'L1' (default is 'L2')\n\nOUTPUT:\n\nerr = the 2D error function; size = (nsamp,2*lag+1)\n\nThe error function is equation 1 in Hale, 2013.\n\nYou could umcomment the L1 norm and comment the L2 norm if you want on Line 29\n\nOriginal by Di Yang  Last modified by Dylan Mikesell (25 Feb. 2015)\n\n\n\n\n\n","category":"function"},{"location":"Functions/#DTWDT.DTWDTfunctions.accumulateErrorFunction","page":"Functions","title":"DTWDT.DTWDTfunctions.accumulateErrorFunction","text":"USAGE: d = accumulationdiwmod( dir, err, nSample, lag, b )\n\nINPUT:\n\ndir = accumulation direction ( dir > 0 = forward in time, dir <= 0 = backward in time)\n\nerr = the 2D error function; size = (nsamp,2*lag+1)\n\nnSample = numer of points to compare in the traces\n\nlag = maximum lag in sample number to search\n\nb = strain limit (integer value >= 1)\n\nOUTPUT:\n\nd = the 2D distance function; size = (nsamp,2*lag+1)\n\nThe function is equation 6 in Hale, 2013.\n\nOriginal by Di Yang Last modified by Dylan Mikesell (25 Feb. 2015)\n\n\n\n\n\n","category":"function"},{"location":"Functions/#DTWDT.DTWDTfunctions.backtrackDistanceFunction","page":"Functions","title":"DTWDT.DTWDTfunctions.backtrackDistanceFunction","text":"USAGE: stbar = backtrackDistanceFunction( dir, d, err, lmin, b )\n\nINPUT:\n\ndir   = side to start minimization ( dir > 0 = front, dir <= 0 =  back)\n\nd     = the 2D distance function; size = (nsamp,2*lag+1)\n\nerr   = the 2D error function; size = (nsamp,2*lag+1)\n\nlmin  = minimum lag to search over\n\nb     = strain limit (integer value >= 1)\n\nOUTPUT:\n\nstbar = vector of integer shifts subject to |u(i)-u(i-1)| <= 1/b\n\nThe function is equation 2 in Hale, 2013.\n\nOriginal by Di Yang Last modified by Dylan Mikesell (19 Dec. 2014)\n\n\n\n\n\n","category":"function"},{"location":"Functions/#DTWDT.DTWDTfunctions.computeDTWerror","page":"Functions","title":"DTWDT.DTWDTfunctions.computeDTWerror","text":"Compute the accumulated error along the warping path for Dynamic  Time Warping.\n\nUSAGE: function error = computeDTWerror( Aerr, u, lag0 )\n\nINPUT:\n\nAerr = error MATRIX (equation 13 in Hale, 2013)\n\nu    = warping function (samples) VECTOR\n\nlag0 = value of maximum lag (samples) SCALAR\n\nWritten by Dylan Mikesell Last modified: 25 February 2015\n\n\n\n\n\n","category":"function"},{"location":"Sampleresults/#Sample-Results-1","page":"Sample results","title":"Sample Results","text":"","category":"section"},{"location":"Sampleresults/#DTWDT*run*example.jl-1","page":"Sample results","title":"DTWDTrunexample.jl","text":"","category":"section"},{"location":"Sampleresults/#","page":"Sample results","title":"Sample results","text":"DTW Distance Array: (Image: )","category":"page"},{"location":"Sampleresults/#","page":"Sample results","title":"Sample results","text":"Comparison of time shift function s(t): (Image: )","category":"page"},{"location":"Sampleresults/#","page":"Sample results","title":"Sample results","text":"Raw, shifted and warped traces from DTW distance function: (Image: )","category":"page"}]
}
